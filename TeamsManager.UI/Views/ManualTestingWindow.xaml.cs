using Microsoft.Identity.Client;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Interop;
using System.Windows.Media;
using System.Windows.Media.Animation;
using TeamsManager.UI.Models;
using TeamsManager.UI.Services;
using TeamsManager.UI.Services.Abstractions;
using MaterialDesignThemes.Wpf;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace TeamsManager.UI.Views
{
    public partial class ManualTestingWindow : Window
    {
        [DllImport("dwmapi.dll")]
        private static extern int DwmSetWindowAttribute(IntPtr hwnd, int attr, ref int attrValue, int attrSize);

        private const int DWMWA_USE_IMMERSIVE_DARK_MODE = 20;

        private readonly IManualTestingService _testingService;
        private readonly IMsalAuthService _msalAuthService;
        private readonly IHttpClientFactory _httpClientFactory;
        private readonly ILogger<ManualTestingWindow> _logger;
        private TestSuite _currentTestSuite = null!;
        private TestCase? _selectedTestCase;
        private AuthenticationResult? _authResult;
        private HttpClient? _httpClient;
        private readonly DateTime _sessionStartTime;

        // W≈Ça≈õciwo≈õƒá do sprawdzania czy okno jest zamkniƒôte
        public bool IsClosed { get; private set; } = false;

        /// <summary>
        /// Konstruktor okna test√≥w manualnych z dependency injection
        /// </summary>
        /// <param name="msalAuthService">Serwis autentykacji MSAL</param>
        /// <param name="manualTestingService">Serwis zarzƒÖdzania testami</param>
        /// <param name="httpClientFactory">Fabryka klient√≥w HTTP</param>
        /// <param name="logger">Logger dla diagnostyki</param>
        public ManualTestingWindow(
            IMsalAuthService msalAuthService,
            IManualTestingService manualTestingService,
            IHttpClientFactory httpClientFactory,
            ILogger<ManualTestingWindow> logger)
        {
            InitializeComponent();
            
            _msalAuthService = msalAuthService ?? throw new ArgumentNullException(nameof(msalAuthService));
            _testingService = manualTestingService ?? throw new ArgumentNullException(nameof(manualTestingService));
            _httpClientFactory = httpClientFactory ?? throw new ArgumentNullException(nameof(httpClientFactory));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            
            _sessionStartTime = DateTime.Now;

            // Ustaw ciemny motyw dla tego okna
            this.SourceInitialized += (s, e) =>
            {
                var helper = new WindowInteropHelper(this);
                SetWindowToDarkMode(helper.Handle);
            };

            // Obs≈Çuga zamkniƒôcia okna - automatyczne generowanie raportu
            this.Closing += async (s, e) =>
            {
                await GenerateSessionReportOnCloseAsync();
                IsClosed = true;
            };

            // Informacje o u≈ºytkowniku bƒôdƒÖ ustawione przez SetAuthenticationContext
            UserInfoText.Text = "U≈ºytkownik: Inicjalizacja...";
            SessionInfoText.Text = $"Sesja rozpoczƒôta: {_sessionStartTime:yyyy-MM-dd HH:mm:ss}";

            // Inicjalizacja serwis√≥w i test√≥w
            InitializeTestingServices();
            LoadDefaultTests();
        }

        /// <summary>
        /// Inicjalizuje serwisy testowe i sprawdza ich dostƒôpno≈õƒá
        /// </summary>
        private void InitializeTestingServices()
        {
            try
            {
                // Utworzenie HttpClient - u≈ºywamy default client bez specjalnej konfiguracji
                // aby m√≥c prze≈ÇƒÖczaƒá tokeny podczas test√≥w
                _httpClient = _httpClientFactory.CreateClient();
                _logger.LogDebug("ManualTestingWindow: HttpClient utworzony przez factory");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "B≈ÇƒÖd podczas inicjalizacji serwis√≥w testowych");
                MessageBox.Show(
                    "Nie uda≈Ço siƒô zainicjalizowaƒá serwis√≥w testowych.\nNiekt√≥re funkcje mogƒÖ byƒá niedostƒôpne.",
                    "Ostrze≈ºenie",
                    MessageBoxButton.OK,
                    MessageBoxImage.Warning);
            }
        }

        /// <summary>
        /// Ustawia kontekst uwierzytelniania po utworzeniu okna
        /// </summary>
        /// <param name="authResult">Wynik uwierzytelniania</param>
        public void SetAuthenticationContext(AuthenticationResult? authResult)
        {
            _authResult = authResult;
            
            // Aktualizuj informacje o u≈ºytkowniku
            if (_authResult?.Account?.Username != null)
            {
                UserInfoText.Text = $"U≈ºytkownik: {_authResult.Account.Username}";
                SessionInfoText.Text = $"Sesja rozpoczƒôta: {_sessionStartTime:yyyy-MM-dd HH:mm:ss}";
            }
            else
            {
                UserInfoText.Text = "U≈ºytkownik: Niezalogowany";
                SessionInfoText.Text = $"Sesja rozpoczƒôta: {_sessionStartTime:yyyy-MM-dd HH:mm:ss}";
            }
        }

        private static void SetWindowToDarkMode(IntPtr handle)
        {
            try
            {
                int darkMode = 1;
                DwmSetWindowAttribute(handle, DWMWA_USE_IMMERSIVE_DARK_MODE, ref darkMode, sizeof(int));
            }
            catch
            {
                // Je≈õli nie dzia≈Ça na starszej wersji Windows, po prostu ignoruj
            }
        }

        private void LoadDefaultTests()
        {
            _logger.LogDebug("≈Åadowanie domy≈õlnych test√≥w...");
            try
            {
                _currentTestSuite = new TestSuite
                {
                    Name = "Testy Manualne TeamsManager",
                    Version = "1.0",
                    TestCases = new List<TestCase>()
                };

                // Dodaj testy wed≈Çug kategorii
                AddAuthenticationTests();
                AddGraphApiTests();
                AddPowerShellTests();
                AddTeamsManagementTests();
                AddUITests();

                // Za≈Çaduj testy do kategorycznych list
                LoadTestsToCategories();
                UpdateStatistics();
                
                _logger.LogInformation("Za≈Çadowano {Count} test√≥w", _currentTestSuite.TestCases.Count);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "B≈ÇƒÖd podczas ≈Çadowania test√≥w");
            }
        }

        private void AddAuthenticationTests()
        {
            _currentTestSuite.TestCases.Add(new TestCase
            {
                Id = "AUTH-001",
                Name = "Test logowania do systemu",
                Description = "Weryfikuje poprawno≈õƒá procesu uwierzytelniania u≈ºytkownika w aplikacji TeamsManager. " +
                             "Test sprawdza czy aplikacja mo≈ºe pomy≈õlnie uwierzytelniƒá u≈ºytkownika za pomocƒÖ Microsoft Identity Platform " +
                             "i uzyskaƒá niezbƒôdne tokeny dostƒôpu do lokalnego API.",
                Category = "Uwierzytelnianie",
                Priority = "Krytyczny",
                ExpectedResult = "U≈ºytkownik zostanie pomy≈õlnie uwierzytelniony, aplikacja otrzyma token dostƒôpu i wy≈õwietli informacje o u≈ºytkowniku",
                Steps = new List<string>
                {
                    "Uruchom aplikacjƒô TeamsManager",
                    "Kliknij przycisk 'Zaloguj siƒô'",
                    "Wprowad≈∫ poprawne dane logowania Microsoft",
                    "Potwierd≈∫ zgody na dostƒôp aplikacji (je≈õli wymagane)",
                    "Sprawd≈∫ czy aplikacja wy≈õwietla nazwƒô u≈ºytkownika i awatar",
                    "Sprawd≈∫ czy przycisk 'Testy manualne' zosta≈Ç aktywowany"
                },
                HasAutomaticExecution = true,
                AutoExecuteButtonText = "üöÄ Sprawd≈∫ status logowania"
            });

            _currentTestSuite.TestCases.Add(new TestCase
            {
                Id = "AUTH-002", 
                Name = "Test API WhoAmI - informacje o u≈ºytkowniku",
                Description = "Sprawdza czy lokalny API TeamsManager poprawnie zwraca informacje o aktualnie zalogowanym u≈ºytkowniku. " +
                             "Test weryfikuje dzia≈Çanie endpointu /api/TestAuth/whoami oraz poprawno≈õƒá parsowania tokenu JWT.",
                Category = "Uwierzytelnianie",
                Priority = "Wysoki",
                ExpectedResult = "API zwraca JSON z informacjami o u≈ºytkowniku: UPN, ObjectId, typ uwierzytelniania i listƒô claims",
                Steps = new List<string>
                {
                    "Upewnij siƒô ≈ºe jeste≈õ zalogowany do aplikacji", 
                    "Kliknij przycisk 'Sprawd≈∫ informacje o u≈ºytkowniku'",
                    "Sprawd≈∫ czy API zwraca status 200 OK",
                    "Zweryfikuj czy zwr√≥cone dane zawierajƒÖ poprawny UserPrincipalName",
                    "Sprawd≈∫ czy ObjectId jest obecny i ma format UUID",
                    "Zweryfikuj czy AuthenticationType to 'Bearer'"
                },
                HasAutomaticExecution = true,
                AutoExecuteButtonText = "üîç Wykonaj test WhoAmI"
            });
        }

        private void AddGraphApiTests()
        {
            _currentTestSuite.TestCases.Add(new TestCase
            {
                Id = "GRAPH-001",
                Name = "Test dostƒôpu do Microsoft Graph API",
                Description = "Weryfikuje czy aplikacja mo≈ºe uzyskaƒá dedykowany token dla Microsoft Graph API i uzyskaƒá dostƒôp " +
                             "do podstawowych informacji u≈ºytkownika. Test sprawdza dzia≈Çanie endpoint√≥w /me i /me/photo.",
                Category = "API Graph",
                Priority = "≈öredni",
                ExpectedResult = "Aplikacja pomy≈õlnie ≈ÇƒÖczy siƒô z Graph API, pobiera profil u≈ºytkownika i jego zdjƒôcie",
                Steps = new List<string>
                {
                    "Upewnij siƒô ≈ºe jeste≈õ zalogowany",
                    "Kliknij przycisk testowania Graph API",
                    "Sprawd≈∫ czy aplikacja uzyskuje token Graph (mo≈ºe wymagaƒá dodatkowych zg√≥d)",
                    "Zweryfikuj czy endpoint /me zwraca dane profilu",
                    "Sprawd≈∫ czy endpoint /me/photo zwraca zdjƒôcie u≈ºytkownika lub b≈ÇƒÖd 404 (brak zdjƒôcia to OK)",
                    "Sprawd≈∫ wyniki w polu tekstowym"
                },
                HasAutomaticExecution = true,
                AutoExecuteButtonText = "üåê Test Graph API"
            });

            _currentTestSuite.TestCases.Add(new TestCase
            {
                Id = "GRAPH-002",
                Name = "Test ≈Çadowania profilu u≈ºytkownika na ekranie g≈Ç√≥wnym",
                Description = "Sprawdza czy g≈Ç√≥wny ekran aplikacji poprawnie ≈Çaduje i wy≈õwietla profil u≈ºytkownika z Graph API, " +
                             "w tym jego nazwƒô wy≈õwietlanƒÖ i awatar.",
                Category = "API Graph", 
                Priority = "≈öredni",
                ExpectedResult = "Na ekranie g≈Ç√≥wnym widoczna jest nazwa u≈ºytkownika i jego awatar zamiast fragmentu tokenu",
                Steps = new List<string>
                {
                    "Zaloguj siƒô do aplikacji",
                    "Sprawd≈∫ lewy g√≥rny r√≥g g≈Ç√≥wnego okna",
                    "Zweryfikuj czy wy≈õwietlana jest pe≈Çna nazwa u≈ºytkownika (DisplayName)",
                    "Sprawd≈∫ czy awatar u≈ºytkownika jest wy≈õwietlany poprawnie",
                    "Je≈õli awatar nie jest dostƒôpny, powinien byƒá wy≈õwietlony domy≈õlny placeholder",
                    "Upewnij siƒô ≈ºe nie sƒÖ widoczne fragmenty token√≥w"
                },
                HasAutomaticExecution = false
            });
        }

        private void AddPowerShellTests()
        {
            _currentTestSuite.TestCases.Add(new TestCase
            {
                Id = "PS-001",
                Name = "Test po≈ÇƒÖczenia PowerShell z Microsoft Graph",
                Description = "Weryfikuje czy serwis PowerShell mo≈ºe pomy≈õlnie nawiƒÖzaƒá po≈ÇƒÖczenie z Microsoft Graph przy u≈ºyciu " +
                             "tokenu uzyskanego przez przep≈Çyw On-Behalf-Of. Test sprawdza czy modu≈Ç Microsoft.Graph jest dostƒôpny " +
                             "i czy mo≈ºna wykonaƒá polecenia Graph przez PowerShell.",
                Category = "PowerShell",
                Priority = "Krytyczny",
                ExpectedResult = "PowerShell pomy≈õlnie ≈ÇƒÖczy siƒô z Graph, zwraca status po≈ÇƒÖczenia i podstawowe informacje",
                Steps = new List<string>
                {
                    "Upewnij siƒô ≈ºe jeste≈õ zalogowany do aplikacji",
                    "Kliknij przycisk testowania PowerShell",
                    "Sprawd≈∫ czy API wykonuje przep≈Çyw On-Behalf-Of",
                    "Zweryfikuj czy PowerShell Service otrzymuje token Graph",
                    "Sprawd≈∫ czy polecenie Connect-MgGraph wykonuje siƒô pomy≈õlnie",
                    "Sprawd≈∫ status po≈ÇƒÖczenia w wynikach testu"
                },
                HasAutomaticExecution = true,
                AutoExecuteButtonText = "üîß Test PowerShell Graph"
            });

            _currentTestSuite.TestCases.Add(new TestCase
            {
                Id = "PS-002",
                Name = "Test polece≈Ñ PowerShell Microsoft.Graph",
                Description = "Sprawdza czy po nawiƒÖzaniu po≈ÇƒÖczenia mo≈ºna wykonaƒá podstawowe polecenia modu≈Çu Microsoft.Graph " +
                             "jak Get-MgUser, Get-MgGroup itp.",
                Category = "PowerShell",
                Priority = "Wysoki", 
                ExpectedResult = "Polecenia PowerShell Graph wykonujƒÖ siƒô pomy≈õlnie i zwracajƒÖ dane",
                Steps = new List<string>
                {
                    "NawiƒÖ≈º po≈ÇƒÖczenie PowerShell z Graph (test PS-001)",
                    "Wykonaj polecenie Get-MgContext sprawdzajƒÖce kontekst",
                    "Wykonaj Get-MgUser -UserId 'me' pobierajƒÖce profil",
                    "Sprawd≈∫ czy polecenia zwracajƒÖ dane bez b≈Çƒôd√≥w",
                    "Zweryfikuj czy dane sƒÖ w poprawnym formacie JSON/PowerShell"
                },
                HasAutomaticExecution = false
            });
        }

        private void AddTeamsManagementTests()
        {
            _currentTestSuite.TestCases.Add(new TestCase
            {
                Id = "TEAMS-001",
                Name = "Test pobierania listy zespo≈Ç√≥w u≈ºytkownika",
                Description = "Weryfikuje czy aplikacja mo≈ºe pobraƒá listƒô zespo≈Ç√≥w Microsoft Teams do kt√≥rych nale≈ºy u≈ºytkownik. " +
                             "Test sprawdza dzia≈Çanie API endpoint i poprawno≈õƒá zwracanych danych.",
                Category = "ZarzƒÖdzanie Teams",
                Priority = "Wysoki",
                ExpectedResult = "API zwraca listƒô zespo≈Ç√≥w z podstawowymi informacjami: nazwa, opis, liczba cz≈Çonk√≥w",
                Steps = new List<string>
                {
                    "Zaloguj siƒô do aplikacji", 
                    "Przejd≈∫ do sekcji zarzƒÖdzania zespo≈Çami",
                    "Kliknij 'Pobierz zespo≈Çy'",
                    "Sprawd≈∫ czy lista zespo≈Ç√≥w siƒô ≈Çaduje",
                    "Zweryfikuj czy ka≈ºdy zesp√≥≈Ç ma wy≈õwietlanƒÖ nazwƒô i podstawowe informacje",
                    "Sprawd≈∫ czy mo≈ºna rozwinƒÖƒá szczeg√≥≈Çy zespo≈Çu"
                },
                HasAutomaticExecution = false
            });

            _currentTestSuite.TestCases.Add(new TestCase
            {
                Id = "TEAMS-002",
                Name = "Test zarzƒÖdzania cz≈Çonkami zespo≈Çu",
                Description = "Sprawdza czy aplikacja pozwala na przeglƒÖdanie i zarzƒÖdzanie cz≈Çonkami wybranego zespo≈Çu Teams.",
                Category = "ZarzƒÖdzanie Teams",
                Priority = "≈öredni",
                ExpectedResult = "Mo≈ºliwo≈õƒá przeglƒÖdania listy cz≈Çonk√≥w, dodawania i usuwania u≈ºytkownik√≥w z zespo≈Çu",
                Steps = new List<string>
                {
                    "Wybierz zesp√≥≈Ç z listy",
                    "Kliknij 'ZarzƒÖdzaj cz≈Çonkami'",
                    "Sprawd≈∫ czy lista cz≈Çonk√≥w siƒô ≈Çaduje",
                    "Sprawd≈∫ czy mo≈ºna wyszukaƒá nowych u≈ºytkownik√≥w",
                    "Przetestuj dodawanie nowego cz≈Çonka (je≈õli masz uprawnienia)",
                    "Sprawd≈∫ czy zmiany sƒÖ zapisywane"
                },
                HasAutomaticExecution = false
            });
        }

        private void AddUITests()
        {
            _currentTestSuite.TestCases.Add(new TestCase
            {
                Id = "UI-001",
                Name = "Test responsywno≈õci interfejsu u≈ºytkownika",
                Description = "Weryfikuje czy interfejs aplikacji jest responsywny, elementy ≈ÇadujƒÖ siƒô szybko " +
                             "i aplikacja reaguje na dzia≈Çania u≈ºytkownika bez op√≥≈∫nie≈Ñ.",
                Category = "Interfejs",
                Priority = "≈öredni",
                ExpectedResult = "Interfejs jest p≈Çynny, przyciski reagujƒÖ natychmiast, okna ≈ÇadujƒÖ siƒô w rozsƒÖdnym czasie",
                Steps = new List<string>
                {
                    "Otw√≥rz g≈Ç√≥wne okno aplikacji",
                    "Sprawd≈∫ czas ≈Çadowania element√≥w interfejsu",
                    "Kliknij r√≥≈ºne przyciski i sprawd≈∫ responsywno≈õƒá",
                    "Otw√≥rz okno test√≥w i sprawd≈∫ czy ≈Çaduje siƒô p≈Çynnie",
                    "Prze≈ÇƒÖczaj miƒôdzy kategoriami test√≥w",
                    "Sprawd≈∫ czy scrollowanie dzia≈Ça p≈Çynnie"
                },
                HasAutomaticExecution = false
            });

            _currentTestSuite.TestCases.Add(new TestCase
            {
                Id = "UI-002",
                Name = "Test motywu ciemnego Windows 11",
                Description = "Sprawdza czy aplikacja poprawnie stosuje ciemny motyw zgodny z Windows 11 " +
                             "i czy wszystkie elementy sƒÖ czytelne i estetyczne.",
                Category = "Interfejs",
                Priority = "Niski",
                ExpectedResult = "Aplikacja ma sp√≥jny ciemny motyw, tekst jest czytelny, kolory sƒÖ zgodne z Windows 11",
                Steps = new List<string>
                {
                    "Sprawd≈∫ czy okna majƒÖ ciemne t≈Ço",
                    "Zweryfikuj czy tekst jest wyra≈∫nie widoczny",
                    "Sprawd≈∫ czy przyciski majƒÖ odpowiednie efekty hover",
                    "Sprawd≈∫ czy paski przewijania sƒÖ stylizowane",
                    "Zweryfikuj sp√≥jno≈õƒá kolor√≥w w ca≈Çej aplikacji",
                    "Sprawd≈∫ czy ikony sƒÖ czytelne na ciemnym tle"
                },
                HasAutomaticExecution = false
            });
        }

        private void LoadTestsToCategories()
        {
            // Czy≈õƒá listy kategorii
            AuthTestsList.Items.Clear();
            GraphApiTestsList.Items.Clear(); 
            PowerShellTestsList.Items.Clear();
            TeamsManagementTestsList.Items.Clear();
            UiTestsList.Items.Clear();

            // Za≈Çaduj testy do odpowiednich kategorii
            foreach (var test in _currentTestSuite.TestCases)
            {
                var testViewModel = new TestCaseViewModel
                {
                    TestCase = test,
                    ResultIcon = GetResultIcon(test.Result)
                };

                switch (test.Category)
                {
                    case "Uwierzytelnianie":
                        AuthTestsList.Items.Add(testViewModel);
                        break;
                    case "API Graph":
                        GraphApiTestsList.Items.Add(testViewModel);
                        break;
                    case "PowerShell":
                        PowerShellTestsList.Items.Add(testViewModel);
                        break;
                    case "ZarzƒÖdzanie Teams":
                        TeamsManagementTestsList.Items.Add(testViewModel);
                        break;
                    case "Interfejs":
                        UiTestsList.Items.Add(testViewModel);
                        break;
                }
            }
        }

        private void HamburgerButton_Click(object sender, RoutedEventArgs e)
        {
            // Sprawd≈∫ stan wszystkich expander√≥w
            var allExpanders = new List<Expander> 
            { 
                AuthCategoryExpander, 
                GraphApiCategoryExpander, 
                PowerShellCategoryExpander, 
                TeamsManagementCategoryExpander, 
                UiCategoryExpander 
            };
            
            // Je≈õli przynajmniej jeden jest rozwiniƒôty, zwi≈Ñ wszystkie
            // Je≈õli wszystkie sƒÖ zwiniƒôte, rozwi≈Ñ wszystkie
            bool anyExpanded = allExpanders.Any(exp => exp.IsExpanded);
            
            if (anyExpanded)
            {
                // Zwi≈Ñ wszystkie z animacjƒÖ
                foreach (var expander in allExpanders)
                {
                    if (expander.IsExpanded)
                    {
                        var collapseAnimation = new DoubleAnimation(1, 0, TimeSpan.FromSeconds(0.2));
                        collapseAnimation.Completed += (s, args) => expander.IsExpanded = false;
                        expander.BeginAnimation(OpacityProperty, collapseAnimation);
                    }
                }
            }
            else
            {
                // Rozwi≈Ñ wszystkie z animacjƒÖ kaskadowƒÖ
                double delay = 0;
                foreach (var expander in allExpanders)
                {
                    expander.IsExpanded = true;
                    
                    var expandAnimation = new DoubleAnimation(0, 1, TimeSpan.FromSeconds(0.3))
                    {
                        BeginTime = TimeSpan.FromSeconds(delay)
                    };
                    expander.BeginAnimation(OpacityProperty, expandAnimation);
                    
                    delay += 0.05; // Kaskadowy efekt
                }
            }
            
            // Animacja obrotu ikony hamburgera
            if (sender is Button button && button.Content is PackIcon icon)
            {
                var rotateAnimation = new DoubleAnimation
                {
                    From = anyExpanded ? 0 : 180,
                    To = anyExpanded ? 180 : 360,
                    Duration = TimeSpan.FromSeconds(0.3)
                };
                
                var rotateTransform = new RotateTransform();
                icon.RenderTransform = rotateTransform;
                icon.RenderTransformOrigin = new Point(0.5, 0.5);
                
                rotateTransform.BeginAnimation(RotateTransform.AngleProperty, rotateAnimation);
            }
        }

        private void TestCategoryList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            var listBox = sender as ListBox;
            if (listBox?.SelectedItem is TestCaseViewModel selectedViewModel)
            {
                // Odznacz inne listy
                var allLists = new List<ListBox> 
                { 
                    AuthTestsList, 
                    GraphApiTestsList, 
                    PowerShellTestsList, 
                    TeamsManagementTestsList, 
                    UiTestsList 
                };
                
                foreach (var list in allLists.Where(l => l != listBox))
                {
                    list.SelectedItem = null;
                }

                _selectedTestCase = selectedViewModel.TestCase;
                
                // Animacja fade przy zmianie testu
                var fadeOut = new DoubleAnimation(1, 0, TimeSpan.FromSeconds(0.1));
                var fadeIn = new DoubleAnimation(0, 1, TimeSpan.FromSeconds(0.2));
                
                TestTitle.BeginAnimation(OpacityProperty, fadeOut);
                fadeOut.Completed += (s, args) =>
                {
                    DisplayTestDetails(_selectedTestCase);
                    TestTitle.BeginAnimation(OpacityProperty, fadeIn);
                };
            }
        }

        private void RefreshTestList()
        {
            LoadTestsToCategories();
        }

        private void DisplayTestDetails(TestCase testCase)
        {
            TestTitle.Text = testCase.Name;
            TestDescription.Text = testCase.Description;
            ExpectedResultText.Text = testCase.ExpectedResult;

            // Wy≈õwietl endpoint API je≈õli dostƒôpny
            if (!string.IsNullOrEmpty(testCase.ApiEndpoint))
            {
                ApiEndpointPanel.Visibility = Visibility.Visible;
                ApiEndpointText.Text = testCase.ApiEndpoint;
            }
            else
            {
                ApiEndpointPanel.Visibility = Visibility.Collapsed;
            }

            // Za≈Çaduj kroki
            var steps = new List<TestStepViewModel>();
            for (int i = 0; i < testCase.Steps.Count; i++)
            {
                steps.Add(new TestStepViewModel
                {
                    StepNumber = $"{i + 1}",
                    StepText = testCase.Steps[i]
                });
            }
            TestStepsList.ItemsSource = steps;

            // Wyczy≈õƒá poprzednie wyniki je≈õli test siƒô zmieni≈Ç
            if (TestResultTextBox.Text.StartsWith("Tu pojawiƒÖ siƒô wyniki"))
            {
                TestResultTextBox.Text = $"Wybrano test: {testCase.Id}\nGotowy do wykonania...";
            }

            // Dodaj przycisk automatycznego wykonania je≈õli dostƒôpny
            AddAutomaticTestButton(testCase);
        }

        private void AddAutomaticTestButton(TestCase testCase)
        {
            // Usu≈Ñ poprzedni przycisk automatyczny je≈õli istnia≈Ç
            var existingButton = TestStepsList.Parent as StackPanel;
            var parent = existingButton?.Parent as StackPanel;
            
            // Znajd≈∫ kontener krok√≥w
            var stepsContainer = TestStepsList.Parent as StackPanel;
            if (stepsContainer == null) return;

            // Usu≈Ñ poprzedni przycisk automatyczny
            var existingAutoButton = stepsContainer.Children.OfType<Button>()
                .FirstOrDefault(b => b.Name == "AutoExecuteButton");
            if (existingAutoButton != null)
            {
                stepsContainer.Children.Remove(existingAutoButton);
            }

            // Dodaj przycisk automatycznego wykonania je≈õli test go obs≈Çuguje
            if (testCase.HasAutomaticExecution && !string.IsNullOrEmpty(testCase.AutoExecuteButtonText))
            {
                var autoButton = new Button
                {
                    Name = "AutoExecuteButton",
                    Content = testCase.AutoExecuteButtonText,
                    Margin = new Thickness(0, 15, 0, 0),
                    Style = (Style)FindResource("PrimaryActionButton")
                };

                autoButton.Click += (s, e) => ExecuteAutomaticTest(testCase);
                stepsContainer.Children.Add(autoButton);
            }
        }

        private void ShowLoading(bool show, string message = "Wykonywanie testu...")
        {
            if (show)
            {
                LoadingOverlay.Visibility = Visibility.Visible;
                
                // Znajd≈∫ TextBlock w LoadingOverlay
                var textBlock = LoadingOverlay.Descendants<TextBlock>().FirstOrDefault();
                if (textBlock != null)
                {
                    textBlock.Text = message;
                }
                
                var fadeIn = new DoubleAnimation(0, 0.9, TimeSpan.FromSeconds(0.2));
                LoadingOverlay.BeginAnimation(OpacityProperty, fadeIn);
            }
            else
            {
                var fadeOut = new DoubleAnimation(0.9, 0, TimeSpan.FromSeconds(0.2));
                fadeOut.Completed += (s, e) => LoadingOverlay.Visibility = Visibility.Collapsed;
                LoadingOverlay.BeginAnimation(OpacityProperty, fadeOut);
            }
        }

        private async void ExecuteAutomaticTest(TestCase testCase)
        {
            ShowLoading(true, $"Wykonywanie testu {testCase.Id}...");
            
            var startTime = DateTime.Now;
            TestResultTextBox.Text = $"üîÑ Wykonywanie testu {testCase.Id}...\n";
            ExecutionStatus.Text = "üîÑ Test w trakcie wykonania...";

            try
            {
                bool success = false;
                string message = "";

                switch (testCase.Id)
                {
                    case "AUTH-001":
                        // Test statusu logowania
                        if (_authResult != null)
                        {
                            success = true;
                            message = $"‚úÖ U≈ºytkownik jest zalogowany\n" +
                                     $"UPN: {_authResult.Account?.Username}\n" +
                                     $"Tenant: {_authResult.TenantId}\n" +
                                     $"Token wygasa: {_authResult.ExpiresOn:yyyy-MM-dd HH:mm:ss}";
                        }
                        else
                        {
                            success = false;
                            message = "‚ùå U≈ºytkownik nie jest zalogowany";
                        }
                        break;

                    case "AUTH-002":
                        // Test WhoAmI API
                        var whoAmIResult = await ExecuteWhoAmITest();
                        success = whoAmIResult.Success;
                        message = whoAmIResult.Message;
                        break;

                    case "GRAPH-001":
                        // Test Graph API
                        await ExecuteGraphApiTest();
                        return; // ExecuteGraphApiTest ma w≈ÇasnƒÖ obs≈Çugƒô wynik√≥w

                    case "PS-001":
                        // Test PowerShell
                        var psResult = await ExecutePowerShellTest();
                        success = psResult.Success;
                        message = psResult.Message;
                        break;

                    default:
                        message = "‚ùì Ten test nie ma zaimplementowanej automatycznej wykonania";
                        break;
                }

                // Wy≈õwietl wyniki
                TestResultTextBox.Text = $"üìä Wynik testu {testCase.Id}:\n\n{message}";
                ExecutionStatus.Text = success ? "‚úÖ Test zako≈Ñczony pomy≈õlnie" : "‚ùå Test zako≈Ñczony niepowodzeniem";

                // Zapisz do sesji
                var duration = DateTime.Now - startTime;
                await SaveTestSessionToMarkdown(testCase, startTime, duration, message);
            }
            catch (Exception ex)
            {
                var duration = DateTime.Now - startTime;
                string errorMsg = $"‚ùå B≈ÇƒÖd podczas wykonywania testu: {ex.Message}";
                TestResultTextBox.Text = errorMsg;
                ExecutionStatus.Text = "‚ùå B≈ÇƒÖd wykonania testu";
                
                await SaveTestSessionToMarkdown(testCase, startTime, duration, errorMsg);
            }
            finally
            {
                ShowLoading(false);
            }
        }

        private async Task ExecuteGraphApiTest()
        {
            if (_authResult == null)
            {
                TestResultTextBox.Text = "‚ùå Musisz byƒá zalogowany, aby wykonaƒá test Graph API";
                ExecutionStatus.Text = "‚ùå Brak uwierzytelniania";
                return;
            }

            if (_msalAuthService == null)
            {
                TestResultTextBox.Text = "‚ùå Serwis MSAL nie jest dostƒôpny";
                ExecutionStatus.Text = "‚ùå B≈ÇƒÖd konfiguracji";
                return;
            }

            try
            {
                TestResultTextBox.Text = "üîÑ Testowanie dostƒôpu do Microsoft Graph API...\n";
                ExecutionStatus.Text = "üîÑ Pobieranie tokenu Graph...";

                // Pobierz dedykowany token Graph API
                string? graphToken = await _msalAuthService.AcquireGraphTokenAsync();
                
                if (string.IsNullOrEmpty(graphToken))
                {
                    TestResultTextBox.Text += "üîÑ Pr√≥ba pobrania tokenu interaktywnie...\n";
                    graphToken = await _msalAuthService.AcquireGraphTokenInteractiveAsync(this);
                }
                
                if (string.IsNullOrEmpty(graphToken))
                {
                    TestResultTextBox.Text = "‚ùå Nie uda≈Ço siƒô pobraƒá tokenu Graph API\n" +
                                           "Mo≈ºe byƒá wymagana zgoda administratora lub dodatkowe uprawnienia.";
                    ExecutionStatus.Text = "‚ùå Brak dostƒôpu do Graph API";
                    return;
                }

                TestResultTextBox.Text += "‚úÖ Token Graph API pobrany pomy≈õlnie\n";
                ExecutionStatus.Text = "üîÑ Testowanie endpoint√≥w Graph...";

                // Pobierz serwis Graph z DI
                var graphService = App.ServiceProvider.GetRequiredService<TeamsManager.UI.Services.Abstractions.IGraphUserProfileService>();
                var testResult = await graphService.TestGraphAccessAsync(graphToken);

                // Wy≈õwietl szczeg√≥≈Çowe wyniki
                var results = new StringBuilder();
                results.AppendLine("üîç Wyniki testowania Microsoft Graph API:");
                results.AppendLine();
                results.AppendLine($"üìã Endpoint /me: {testResult.MeEndpointStatus}");
                results.AppendLine($"   Dostƒôp do profilu: {(testResult.CanAccessProfile ? "‚úÖ TAK" : "‚ùå NIE")}");
                results.AppendLine();
                results.AppendLine($"üì∏ Endpoint /me/photo: {testResult.PhotoEndpointStatus}");
                results.AppendLine($"   Dostƒôp do zdjƒôƒá: {(testResult.CanAccessPhoto ? "‚úÖ TAK" : "‚ùå NIE")}");
                
                if (!string.IsNullOrEmpty(testResult.ErrorMessage))
                {
                    results.AppendLine();
                    results.AppendLine($"‚ö†Ô∏è Dodatkowe informacje:");
                    results.AppendLine($"   {testResult.ErrorMessage}");
                }

                results.AppendLine();
                results.AppendLine("üìà Podsumowanie:");
                if (testResult.CanAccessProfile)
                {
                    results.AppendLine("‚úÖ Test Graph API zako≈Ñczony pomy≈õlnie - aplikacja ma dostƒôp do podstawowych danych profilu");
                }
                else
                {
                    results.AppendLine("‚ùå Test Graph API nie powi√≥d≈Ç siƒô - brak dostƒôpu do profilu u≈ºytkownika");
                }

                TestResultTextBox.Text = results.ToString();
                ExecutionStatus.Text = testResult.CanAccessProfile ? "‚úÖ Test Graph API - sukces" : "‚ùå Test Graph API - niepowodzenie";
            }
            catch (Exception ex)
            {
                TestResultTextBox.Text = $"‚ùå B≈ÇƒÖd podczas testowania Graph API:\n{ex.Message}";
                ExecutionStatus.Text = "‚ùå B≈ÇƒÖd testu Graph API";
                System.Diagnostics.Debug.WriteLine($"[ManualTestingWindow] Graph API test error: {ex.Message}");
            }
        }

        private async Task<(bool Success, string Message)> ExecuteWhoAmITest()
        {
            if (_authResult == null || string.IsNullOrEmpty(_authResult.AccessToken))
            {
                return (false, "Brak tokenu dostƒôpu");
            }

            if (_httpClient == null)
            {
                return (false, "HttpClient nie zosta≈Ç zainicjalizowany");
            }

            string apiUrl = "https://localhost:7037/api/TestAuth/whoami";

            try
            {
                // Ustawienie nag≈Ç√≥wka autoryzacji - pozwalamy na prze≈ÇƒÖczanie token√≥w
                _httpClient.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", _authResult.AccessToken);

                HttpResponseMessage response = await _httpClient.GetAsync(apiUrl);
                string responseBody = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode)
                {
                    _logger.LogInformation("WhoAmI test succeeded with status {StatusCode}", response.StatusCode);
                    return (true, $"Sukces - Status: {response.StatusCode}, Odpowied≈∫: {responseBody}");
                }
                else
                {
                    _logger.LogWarning("WhoAmI test failed with status {StatusCode}", response.StatusCode);
                    return (false, $"B≈ÇƒÖd API - Status: {response.StatusCode}, Odpowied≈∫: {responseBody}");
                }
            }
            catch (HttpRequestException httpEx)
            {
                _logger.LogError(httpEx, "HTTP request error in WhoAmI test");
                return (false, $"B≈ÇƒÖd po≈ÇƒÖczenia: {httpEx.Message}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unexpected error in WhoAmI test");
                return (false, $"WyjƒÖtek: {ex.Message}");
            }
        }

        private async Task<(bool Success, string Message)> ExecutePowerShellTest()
        {
            if (_authResult == null || string.IsNullOrEmpty(_authResult.AccessToken))
            {
                return (false, "Brak tokenu dostƒôpu");
            }

            if (_httpClient == null)
            {
                return (false, "HttpClient nie zosta≈Ç zainicjalizowany");
            }

            string apiUrl = "https://localhost:7037/api/PowerShell/test-connection";

            try
            {
                // Ustawienie nag≈Ç√≥wka autoryzacji
                _httpClient.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", _authResult.AccessToken);

                HttpResponseMessage response = await _httpClient.PostAsync(apiUrl, null);
                string responseBody = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode)
                {
                    _logger.LogInformation("PowerShell test succeeded with status {StatusCode}", response.StatusCode);
                    return (true, $"Sukces - Status: {response.StatusCode}, Odpowied≈∫: {responseBody}");
                }
                else
                {
                    _logger.LogWarning("PowerShell test failed with status {StatusCode}", response.StatusCode);
                    return (false, $"B≈ÇƒÖd API - Status: {response.StatusCode}, Odpowied≈∫: {responseBody}");
                }
            }
            catch (HttpRequestException httpEx)
            {
                _logger.LogError(httpEx, "HTTP request error in PowerShell test");
                return (false, $"B≈ÇƒÖd po≈ÇƒÖczenia: {httpEx.Message}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unexpected error in PowerShell test");
                return (false, $"WyjƒÖtek: {ex.Message}");
            }
        }

        private async Task SaveTestSessionToMarkdown(TestCase testCase, DateTime executionTime, TimeSpan duration, string errorDetails)
        {
            string markdownFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "SesjeTestowe.md");
            
            var sessionEntry = new StringBuilder();
            
            // Sprawd≈∫ czy plik istnieje, je≈õli nie - dodaj nag≈Ç√≥wek
            bool fileExists = File.Exists(markdownFile);
            if (!fileExists)
            {
                sessionEntry.AppendLine("# Sesje Testowe - TeamsManager");
                sessionEntry.AppendLine();
            }

            // Sprawd≈∫ czy dla tej sesji ju≈º istnieje tabela
            string sessionHeader = $"## Sesja testowa - {_sessionStartTime:yyyy-MM-dd HH:mm:ss}";
            string tableHeader = "| Czas wykonania | Nazwa testu | Wynik | Komunikat | Czas trwania | U≈ºytkownik |";
            string tableSeparator = "|---|---|---|---|---|---|";

            string existingContent = fileExists ? await File.ReadAllTextAsync(markdownFile) : "";
            
            if (!existingContent.Contains(sessionHeader))
            {
                // Nowa sesja - dodaj nag≈Ç√≥wek i tabelƒô
                sessionEntry.AppendLine(sessionHeader);
                sessionEntry.AppendLine();
                sessionEntry.AppendLine(tableHeader);
                sessionEntry.AppendLine(tableSeparator);
            }

            // Dodaj wpis o te≈õcie
            string resultIcon = GetResultIcon(testCase.Result);
            string userName = _authResult?.Account?.Username ?? "Niezalogowany";
            string message = !string.IsNullOrEmpty(errorDetails) ? errorDetails.Replace("|", "\\|") : "Wykonano poprawnie";
            string durationStr = duration.TotalSeconds > 0 ? $"{duration.TotalSeconds:F2}s" : "N/A";

            var testEntry = $"| {executionTime:HH:mm:ss} | {testCase.Name} | {resultIcon} {testCase.Result} | {message} | {durationStr} | {userName} |";
            
            if (existingContent.Contains(sessionHeader))
            {
                // Dodaj do istniejƒÖcej tabeli
                await File.AppendAllTextAsync(markdownFile, testEntry + Environment.NewLine);
            }
            else
            {
                // Nowa sesja
                sessionEntry.AppendLine(testEntry);
                sessionEntry.AppendLine();
                await File.AppendAllTextAsync(markdownFile, sessionEntry.ToString());
            }
        }

        private string GetResultIcon(TestResult result)
        {
            return result switch
            {
                TestResult.Pass => "‚úÖ",
                TestResult.Fail => "‚ùå",
                TestResult.Warning => "‚ö†Ô∏è",
                TestResult.Skip => "‚è≠Ô∏è",
                _ => "‚è∏Ô∏è"
            };
        }

        private void UpdateStatistics()
        {
            var total = _currentTestSuite.TotalTests;
            var passed = _currentTestSuite.PassedTests;
            var failed = _currentTestSuite.FailedTests;
            var warnings = _currentTestSuite.WarningTests;
            var skipped = _currentTestSuite.SkippedTests;

            StatsText.Text = $"≈ÅƒÖcznie: {total} | ‚úÖ {passed} | ‚ùå {failed} | ‚ö†Ô∏è {warnings} | ‚è≠Ô∏è {skipped}";

            var completedTests = passed + failed + warnings + skipped;
            var progressPercentage = total > 0 ? (double)completedTests / total * 100 : 0;
            ProgressBar.Value = progressPercentage;
        }

        private async void LoadTests_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var savedSuite = await _testingService.LoadTestResults();
                if (savedSuite != null)
                {
                    _currentTestSuite = savedSuite;
                    RefreshTestList();
                    UpdateStatistics();
                    MessageBox.Show("Wyniki test√≥w zosta≈Çy za≈Çadowane", "Sukces", 
                        MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    MessageBox.Show("Nie znaleziono zapisanych wynik√≥w test√≥w", "Informacja", 
                        MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"B≈ÇƒÖd podczas ≈Çadowania: {ex.Message}", "B≈ÇƒÖd", 
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private async void SaveResults_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                await _testingService.SaveTestConfig(_currentTestSuite);
                MessageBox.Show("Wyniki test√≥w zosta≈Çy zapisane", "Sukces", 
                    MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"B≈ÇƒÖd podczas zapisywania: {ex.Message}", "B≈ÇƒÖd", 
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private async void GenerateReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                await _testingService.SaveTestResults(_currentTestSuite);
                
                var filePath = _testingService.GetResultsFilePath();
                MessageBox.Show($"Raport wygenerowany:\n{filePath}", "Sukces", 
                    MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"B≈ÇƒÖd podczas generowania raportu: {ex.Message}", "B≈ÇƒÖd", 
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void OpenReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var filePath = _testingService.GetResultsFilePath();
                if (System.IO.File.Exists(filePath))
                {
                    Process.Start(new ProcessStartInfo
                    {
                        FileName = filePath,
                        UseShellExecute = true
                    });
                }
                else
                {
                    MessageBox.Show("Raport nie zosta≈Ç jeszcze wygenerowany. U≈ºyj 'Generuj Raport' najpierw.", 
                        "Informacja", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"B≈ÇƒÖd podczas otwierania raportu: {ex.Message}", "B≈ÇƒÖd", 
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void BackToMain_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                // Znajd≈∫ g≈Ç√≥wne okno (MainShellWindow) i przenie≈õ na pierwszy plan
                var mainWindow = System.Windows.Application.Current.Windows
                    .OfType<Views.Shell.MainShellWindow>()
                    .FirstOrDefault();
                    
                if (mainWindow != null)
                {
                    mainWindow.Show();
                    mainWindow.WindowState = WindowState.Normal;
                    mainWindow.Activate();
                    mainWindow.Focus();
                }
                
                // Minimalizuj okno test√≥w
                this.WindowState = WindowState.Minimized;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"B≈ÇƒÖd podczas przej≈õcia do g≈Ç√≥wnego okna: {ex.Message}", "B≈ÇƒÖd", 
                    MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public async Task SaveLoginResultToSession(bool success, string message, TimeSpan duration)
        {
            var executionTime = DateTime.Now;
            
            // Znajd≈∫ test logowania
            var loginTest = _currentTestSuite.TestCases.FirstOrDefault(t => t.Id == "AUTH-001");
            if (loginTest != null)
            {
                loginTest.Result = success ? TestResult.Pass : TestResult.Fail;
                loginTest.ExecutedAt = executionTime;
                loginTest.ErrorDetails = message;

                await SaveTestSessionToMarkdown(loginTest, executionTime, duration, message);
                await _testingService.SaveTestConfig(_currentTestSuite);

                RefreshTestList();
                UpdateStatistics();
            }
        }

        private async Task GenerateSessionReportOnCloseAsync()
        {
            try
            {
                var executedTests = _currentTestSuite.TestCases.Where(t => t.ExecutedAt.HasValue).ToList();
                
                if (executedTests.Any())
                {
                    System.Diagnostics.Debug.WriteLine($"[ManualTestingWindow] Generowanie raportu sesji - wykonano {executedTests.Count} test√≥w");
                    
                    // Zapisz ko≈Ñcowy raport sesji do markdown
                    string markdownFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "SesjeTestowe.md");
                    var sessionSummary = new StringBuilder();
                    
                    var sessionEndTime = DateTime.Now;
                    var sessionDuration = sessionEndTime - _sessionStartTime;
                    
                    sessionSummary.AppendLine();
                    sessionSummary.AppendLine($"### Podsumowanie sesji zako≈Ñczonej o {sessionEndTime:yyyy-MM-dd HH:mm:ss}");
                    sessionSummary.AppendLine($"**Czas trwania sesji:** {sessionDuration.TotalMinutes:F1} minut");
                    sessionSummary.AppendLine($"**Wykonanych test√≥w:** {executedTests.Count}");
                    sessionSummary.AppendLine($"**Pomy≈õlnych:** {executedTests.Count(t => t.Result == TestResult.Pass)}");
                    sessionSummary.AppendLine($"**Nieudanych:** {executedTests.Count(t => t.Result == TestResult.Fail)}");
                    sessionSummary.AppendLine($"**Ostrze≈ºe≈Ñ:** {executedTests.Count(t => t.Result == TestResult.Warning)}");
                    sessionSummary.AppendLine($"**Pominiƒôte:** {executedTests.Count(t => t.Result == TestResult.Skip)}");
                    sessionSummary.AppendLine();

                    await File.AppendAllTextAsync(markdownFile, sessionSummary.ToString());
                    
                    // Zapisz r√≥wnie≈º wyniki do systemu
                    await _testingService.SaveTestResults(_currentTestSuite);
                    
                    System.Diagnostics.Debug.WriteLine($"[ManualTestingWindow] Raport sesji zapisany do: {markdownFile}");
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"[ManualTestingWindow] B≈ÇƒÖd podczas generowania raportu sesji: {ex}");
            }
        }

        private async void MarkResult_Click(object sender, RoutedEventArgs e)
        {
            if (_selectedTestCase == null)
            {
                MessageBox.Show("Wybierz test z listy", "Informacja", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            if (sender is Button button && Enum.TryParse<TestResult>(button.Tag.ToString(), out var result))
            {
                var executionTime = DateTime.Now;
                var duration = TimeSpan.Zero;
                string errorMessage = NotesTextBox.Text.Trim();

                _selectedTestCase.Result = result;
                _selectedTestCase.ExecutedAt = executionTime;
                _selectedTestCase.Notes = NotesTextBox.Text;
                _selectedTestCase.ErrorDetails = errorMessage;

                // Aktualizuj widok
                RefreshTestList();
                UpdateStatistics();
                DisplayTestDetails(_selectedTestCase);

                // Zapisz wynik do sesji markdown
                try
                {
                    await SaveTestSessionToMarkdown(_selectedTestCase, executionTime, duration, errorMessage);
                    await _testingService.SaveTestConfig(_currentTestSuite);
                    
                    ExecutionStatus.Text = $"‚úÖ Wynik zapisany: {result} - {executionTime:HH:mm:ss}";
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"B≈ÇƒÖd podczas zapisywania: {ex.Message}", "B≈ÇƒÖd", 
                        MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
    }

    // ViewModel classes dla binding
    public class TestCaseViewModel
    {
        public TestCase TestCase { get; set; } = null!;
        public string ResultIcon { get; set; } = "‚è∏Ô∏è";
        public string Id => TestCase.Id;
        public string Name => TestCase.Name;
        public string Priority => TestCase.Priority;
        public List<TestStepViewModel> StepNumber { get; set; } = new();
    }

    public class TestStepViewModel
    {
        public string StepNumber { get; set; } = string.Empty;
        public string StepText { get; set; } = string.Empty;
    }
}

// Extension method helper
public static class VisualTreeExtensions
{
    public static IEnumerable<T> Descendants<T>(this DependencyObject parent) where T : DependencyObject
    {
        if (parent == null) yield break;
        
        var queue = new Queue<DependencyObject>();
        queue.Enqueue(parent);
        
        while (queue.Count > 0)
        {
            var current = queue.Dequeue();
            var childrenCount = VisualTreeHelper.GetChildrenCount(current);
            
            for (int i = 0; i < childrenCount; i++)
            {
                var child = VisualTreeHelper.GetChild(current, i);
                if (child is T typedChild)
                    yield return typedChild;
                queue.Enqueue(child);
            }
        }
    }
}
