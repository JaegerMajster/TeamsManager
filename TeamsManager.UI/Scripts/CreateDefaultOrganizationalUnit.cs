using Microsoft.EntityFrameworkCore;
using TeamsManager.Core.Models;
using TeamsManager.Data;

namespace TeamsManager.UI.Scripts
{
    /// <summary>
    /// Skrypt do utworzenia domy≈õlnej jednostki organizacyjnej "Podstawowy"
    /// i przypisania do niej wszystkich obecnych dzia≈Ç√≥w
    /// </summary>
    public static class CreateDefaultOrganizationalUnit
    {
        public static async Task ExecuteAsync(TeamsManagerDbContext context)
        {
            Console.WriteLine("üîÑ Rozpoczynam tworzenie domy≈õlnej jednostki organizacyjnej...");

            try
            {
                // Sprawd≈∫ czy tabela OrganizationalUnits istnieje
                try
                {
                    var tableExists = await context.OrganizationalUnits.AnyAsync();
                    Console.WriteLine($"‚úÖ Tabela OrganizationalUnits istnieje i zawiera {await context.OrganizationalUnits.CountAsync()} rekord√≥w");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå Tabela OrganizationalUnits nie istnieje lub jest niedostƒôpna: {ex.Message}");
                    Console.WriteLine("üîÑ Pr√≥bujƒô zastosowaƒá migracje...");
                    
                    // Spr√≥buj zastosowaƒá migracje
                    await context.Database.MigrateAsync();
                    Console.WriteLine("‚úÖ Migracje zosta≈Çy zastosowane");
                }

                // Sprawd≈∫ czy ju≈º istnieje jednostka organizacyjna "Podstawowy"
                var existingUnit = await context.OrganizationalUnits
                    .FirstOrDefaultAsync(ou => ou.Name == "Podstawowy");

                string defaultUnitId;

                if (existingUnit == null)
                {
                    // Utw√≥rz domy≈õlnƒÖ jednostkƒô organizacyjnƒÖ
                    var defaultUnit = new OrganizationalUnit
                    {
                        Id = Guid.NewGuid().ToString(),
                        Name = "Podstawowy",
                        Description = "Domy≈õlna jednostka organizacyjna dla wszystkich dzia≈Ç√≥w",
                        ParentUnitId = null, // To jest jednostka g≈Ç√≥wna
                        SortOrder = 0,
                        IsActive = true
                        // CreatedAt i UpdatedAt sƒÖ automatycznie ustawiane przez BaseEntity
                    };

                    context.OrganizationalUnits.Add(defaultUnit);
                    await context.SaveChangesAsync();
                    
                    defaultUnitId = defaultUnit.Id;
                    Console.WriteLine($"‚úÖ Utworzono domy≈õlnƒÖ jednostkƒô organizacyjnƒÖ: {defaultUnit.Name} (ID: {defaultUnitId})");
                }
                else
                {
                    defaultUnitId = existingUnit.Id;
                    Console.WriteLine($"‚ÑπÔ∏è Jednostka organizacyjna 'Podstawowy' ju≈º istnieje (ID: {defaultUnitId})");
                }

                // Znajd≈∫ wszystkie dzia≈Çy kt√≥re nie majƒÖ przypisanej jednostki organizacyjnej
                var departmentsWithoutOU = await context.Departments
                    .Where(d => d.OrganizationalUnitId == null)
                    .ToListAsync();

                if (departmentsWithoutOU.Any())
                {
                    Console.WriteLine($"üîÑ Przypisujƒô {departmentsWithoutOU.Count} dzia≈Ç√≥w do domy≈õlnej jednostki organizacyjnej...");

                    foreach (var department in departmentsWithoutOU)
                    {
                        department.OrganizationalUnitId = defaultUnitId;
                        // UpdatedAt jest automatycznie ustawiane przez BaseEntity
                        Console.WriteLine($"   üìÅ {department.Name} ‚Üí Podstawowy");
                    }

                    await context.SaveChangesAsync();
                    Console.WriteLine($"‚úÖ Przypisano {departmentsWithoutOU.Count} dzia≈Ç√≥w do jednostki organizacyjnej 'Podstawowy'");
                }
                else
                {
                    Console.WriteLine("‚ÑπÔ∏è Wszystkie dzia≈Çy majƒÖ ju≈º przypisane jednostki organizacyjne");
                }

                // Podsumowanie
                var totalDepartments = await context.Departments.CountAsync();
                var departmentsInDefaultOU = await context.Departments
                    .CountAsync(d => d.OrganizationalUnitId == defaultUnitId);

                Console.WriteLine($"üìä Podsumowanie:");
                Console.WriteLine($"   ‚Ä¢ ≈ÅƒÖczna liczba dzia≈Ç√≥w: {totalDepartments}");
                Console.WriteLine($"   ‚Ä¢ Dzia≈Ç√≥w w jednostce 'Podstawowy': {departmentsInDefaultOU}");
                Console.WriteLine("‚úÖ Skrypt zako≈Ñczony pomy≈õlnie!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå B≈ÇƒÖd podczas wykonywania skryptu: {ex.Message}");
                Console.WriteLine($"üìã Szczeg√≥≈Çy: {ex}");
                throw;
            }
        }
    }
} 