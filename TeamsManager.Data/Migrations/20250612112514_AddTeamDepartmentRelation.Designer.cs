// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamsManager.Data;

#nullable disable

namespace TeamsManager.Data.Migrations
{
    [DbContext(typeof(TeamsManagerDbContext))]
    [Migration("20250612112514_AddTeamDepartmentRelation")]
    partial class AddTeamDepartmentRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("SchoolTypeUser", b =>
                {
                    b.Property<string>("SupervisedSchoolTypesId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SupervisingViceDirectorsId")
                        .HasColumnType("TEXT");

                    b.HasKey("SupervisedSchoolTypesId", "SupervisingViceDirectorsId");

                    b.HasIndex("SupervisingViceDirectorsId");

                    b.ToTable("UserSchoolTypeSupervision", (string)null);
                });

            modelBuilder.Entity("TeamsManager.Core.Models.ApplicationSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValidationMessage")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidationPattern")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsRequired");

                    b.HasIndex("IsVisible");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("Type");

                    b.ToTable("ApplicationSettings");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.Channel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ChannelType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("FilesCount")
                        .HasColumnType("INTEGER");

                    b.Property<long>("FilesSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGeneral")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsModerationEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastMessageDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MessageCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationSettings")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StatusChangeDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusChangeReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusChangedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("DisplayName");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsGeneral");

                    b.HasIndex("IsPrivate");

                    b.HasIndex("TeamId", "DisplayName");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentDepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("DepartmentCode");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.OperationHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorStackTrace")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FailedItems")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationDetails")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentOperationId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProcessedItems")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetEntityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetEntityName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetEntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TotalItems")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("IsActive");

                    b.HasIndex("ParentOperationId");

                    b.HasIndex("StartedAt");

                    b.HasIndex("Status");

                    b.HasIndex("TargetEntityId");

                    b.HasIndex("TargetEntityType");

                    b.HasIndex("Type");

                    b.ToTable("OperationHistories");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.SchoolType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("FullName");

                    b.HasIndex("IsActive");

                    b.HasIndex("ShortName")
                        .IsUnique();

                    b.ToTable("SchoolTypes");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.SchoolYear", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FirstSemesterEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FirstSemesterStart")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SecondSemesterEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SecondSemesterStart")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsCurrent");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SchoolYears");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultSchoolTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Hours")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("DefaultSchoolTypeId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AcademicYear")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseCode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Level")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxMembers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchoolTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolYearId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Semester")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StatusChangeDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusChangeReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusChangedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("TemplateId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TotalHours")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Visibility")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DisplayName");

                    b.HasIndex("ExternalId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Owner");

                    b.HasIndex("SchoolTypeId");

                    b.HasIndex("SchoolYearId");

                    b.HasIndex("Status");

                    b.HasIndex("TemplateId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.TeamMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AddedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanModerate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanPost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomPermissions")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MessagesCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PreviousRole")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RemovalReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RemovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleChangedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RoleChangedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsApproved");

                    b.HasIndex("Role");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId", "TeamId")
                        .IsUnique();

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.TeamTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExampleOutput")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUniversal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUsedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Prefix")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("RemovePolishChars")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SchoolTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Separator")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Suffix")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsDefault");

                    b.HasIndex("IsUniversal");

                    b.HasIndex("Name");

                    b.HasIndex("SchoolTypeId");

                    b.ToTable("TeamTemplates");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlternateEmail")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EmploymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSystemAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UPN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ExternalId");

                    b.HasIndex("IsActive");

                    b.HasIndex("UPN")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.UserSchoolType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCurrentlyActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("SchoolTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("WorkloadPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsCurrentlyActive");

                    b.HasIndex("SchoolTypeId");

                    b.HasIndex("UserId", "SchoolTypeId")
                        .IsUnique();

                    b.ToTable("UserSchoolTypes");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.UserSubject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("IsActive");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId", "SubjectId")
                        .IsUnique();

                    b.ToTable("UserSubjects");
                });

            modelBuilder.Entity("SchoolTypeUser", b =>
                {
                    b.HasOne("TeamsManager.Core.Models.SchoolType", null)
                        .WithMany()
                        .HasForeignKey("SupervisedSchoolTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsManager.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("SupervisingViceDirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamsManager.Core.Models.Channel", b =>
                {
                    b.HasOne("TeamsManager.Core.Models.Team", "Team")
                        .WithMany("Channels")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.Department", b =>
                {
                    b.HasOne("TeamsManager.Core.Models.Department", "ParentDepartment")
                        .WithMany("SubDepartments")
                        .HasForeignKey("ParentDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.Subject", b =>
                {
                    b.HasOne("TeamsManager.Core.Models.SchoolType", "DefaultSchoolType")
                        .WithMany()
                        .HasForeignKey("DefaultSchoolTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DefaultSchoolType");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.Team", b =>
                {
                    b.HasOne("TeamsManager.Core.Models.Department", "Department")
                        .WithMany("Teams")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TeamsManager.Core.Models.SchoolType", "SchoolType")
                        .WithMany("Teams")
                        .HasForeignKey("SchoolTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TeamsManager.Core.Models.SchoolYear", "SchoolYear")
                        .WithMany("Teams")
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TeamsManager.Core.Models.TeamTemplate", "Template")
                        .WithMany("Teams")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("SchoolType");

                    b.Navigation("SchoolYear");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.TeamMember", b =>
                {
                    b.HasOne("TeamsManager.Core.Models.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsManager.Core.Models.User", "User")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.TeamTemplate", b =>
                {
                    b.HasOne("TeamsManager.Core.Models.SchoolType", "SchoolType")
                        .WithMany("Templates")
                        .HasForeignKey("SchoolTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SchoolType");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.User", b =>
                {
                    b.HasOne("TeamsManager.Core.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.UserSchoolType", b =>
                {
                    b.HasOne("TeamsManager.Core.Models.SchoolType", "SchoolType")
                        .WithMany("TeacherAssignments")
                        .HasForeignKey("SchoolTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsManager.Core.Models.User", "User")
                        .WithMany("SchoolTypeAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.UserSubject", b =>
                {
                    b.HasOne("TeamsManager.Core.Models.Subject", "Subject")
                        .WithMany("TeacherAssignments")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsManager.Core.Models.User", "User")
                        .WithMany("TaughtSubjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.Department", b =>
                {
                    b.Navigation("SubDepartments");

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.SchoolType", b =>
                {
                    b.Navigation("TeacherAssignments");

                    b.Navigation("Teams");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.SchoolYear", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.Subject", b =>
                {
                    b.Navigation("TeacherAssignments");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.Team", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.TeamTemplate", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("TeamsManager.Core.Models.User", b =>
                {
                    b.Navigation("SchoolTypeAssignments");

                    b.Navigation("TaughtSubjects");

                    b.Navigation("TeamMemberships");
                });
#pragma warning restore 612, 618
        }
    }
}
